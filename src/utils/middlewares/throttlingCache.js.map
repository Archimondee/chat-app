{"version":3,"file":"throttlingCache.js","sourceRoot":"","sources":["../../src/middlewares/throttlingCache.ts"],"names":[],"mappings":"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","sourcesContent":["import type { WretchOptions, ConfiguredMiddleware } from \"../types.js\"\n\n/* Types */\n\nexport type ThrottlingCacheSkipFunction = (url: string, opts: WretchOptions) => boolean\nexport type ThrottlingCacheKeyFunction = (url: string, opts: WretchOptions) => string\nexport type ThrottlingCacheClearFunction = (url: string, opts: WretchOptions) => boolean\nexport type ThrottlingCacheInvalidateFunction = (url: string, opts: WretchOptions) => string | RegExp | void\nexport type ThrottlingCacheConditionFunction = (response: WretchOptions) => boolean\nexport type ThrottlingCacheOptions = {\n  throttle?: number,\n  skip?: ThrottlingCacheSkipFunction,\n  key?: ThrottlingCacheKeyFunction,\n  clear?: ThrottlingCacheClearFunction,\n  invalidate?: ThrottlingCacheInvalidateFunction,\n  condition?: ThrottlingCacheConditionFunction,\n  flagResponseOnCacheHit?: string\n}\n\n/**\n * ## Throttling cache middleware\n *\n * #### A throttling cache which stores and serves server responses for a certain amount of time.\n *\n * **Options**\n *\n * - *throttle* `milliseconds`\n *\n * > the response will be stored for this amount of time before being deleted from the cache.\n *\n * - *skip* `(url, opts) => boolean`\n *\n * > If skip returns true, then the request is performed even if present in the cache.\n *\n * - *key* `(url, opts) => string`\n *\n * > Returns a key that is used to identify the request.\n *\n * - *clear* `(url, opts) => boolean`\n *\n * > Clears the cache if true.\n *\n * - *invalidate* `(url, opts) => string | RegExp | null`\n *\n * > Removes url(s) matching the string/RegExp from the cache.\n *\n * - *condition* `response => boolean`\n *\n * > If false then the response will not be added to the cache.\n *\n * - *flagResponseOnCacheHit* `string`\n *\n * > If set, a Response returned from the cache whill be flagged with a property name equal to this option.\n *\n */\nexport type ThrottlingCacheMiddleware = (options?: ThrottlingCacheOptions) => ConfiguredMiddleware & {\n  cacheResponse(key: any, response: any): void;\n  cache: Map<any, any>;\n  inflight: Map<any, any>;\n  throttling: Set<unknown>;\n}\n\n/* Defaults */\n\nconst defaultSkip = (url, opts) => (\n  opts.skipCache || opts.method !== \"GET\"\n)\nconst defaultKey = (url, opts) => opts.method + \"@\" + url\nconst defaultClear = (url, opts) => false\nconst defaultInvalidate = (url, opts) => null\nconst defaultCondition = response => response.ok\n\nexport const throttlingCache: ThrottlingCacheMiddleware = ({\n  throttle = 1000,\n  skip = defaultSkip,\n  key = defaultKey,\n  clear = defaultClear,\n  invalidate = defaultInvalidate,\n  condition = defaultCondition,\n  flagResponseOnCacheHit = \"__cached\"\n} = {}) => {\n\n  const cache = new Map()\n  const inflight = new Map()\n  const throttling = new Set()\n\n  const throttleRequest = _key => {\n    if (throttle && !throttling.has(_key)) {\n      throttling.add(_key)\n      setTimeout(() => { throttling.delete(_key) }, throttle)\n    }\n  }\n\n  const middleware = next => (url, opts) => {\n    const _key = key(url, opts)\n\n    let invalidatePatterns = invalidate(url, opts)\n    if (invalidatePatterns) {\n      if (!(invalidatePatterns instanceof Array)) {\n        invalidatePatterns = [invalidatePatterns]\n      }\n      invalidatePatterns.forEach(pattern => {\n        if (typeof pattern === \"string\") {\n          cache.delete(pattern)\n        } else if (pattern instanceof RegExp) {\n          cache.forEach((_, key) => {\n            if (pattern.test(key)) {\n              cache.delete(key)\n            }\n          })\n        }\n      })\n    }\n    if (clear(url, opts)) {\n      cache.clear()\n    }\n\n    if (skip(url, opts)) {\n      return next(url, opts)\n    }\n\n    if (throttling.has(_key)) {\n      // If the cache contains a previous response and we are throttling, serve it and bypass the chain.\n      if (cache.has(_key)) {\n        const cachedClone = cache.get(_key).clone()\n        if (flagResponseOnCacheHit) {\n          // Flag the Response as cached\n          Object.defineProperty(cachedClone, flagResponseOnCacheHit, {\n            value: _key,\n            enumerable: false\n          })\n        }\n        return Promise.resolve(cachedClone)\n        // If the request in already in-flight, wait until it is resolved\n      } else if (inflight.has(_key)) {\n        return new Promise((resolve, reject) => {\n          inflight.get(_key).push([resolve, reject])\n        })\n      }\n    }\n\n    // Init. the pending promises Map\n    if (!inflight.has(_key))\n      inflight.set(_key, [])\n\n    // If we are not throttling, activate the throttle for X milliseconds\n    throttleRequest(_key)\n\n    // We call the next middleware in the chain.\n    return next(url, opts)\n      .then(response => {\n        // Add a cloned response to the cache\n        if (condition(response.clone())) {\n          cache.set(_key, response.clone())\n        }\n        // Resolve pending promises\n        inflight.get(_key).forEach(([resolve]) => resolve(response.clone()))\n        // Remove the inflight pending promises\n        inflight.delete(_key)\n        // Return the original response\n        return response\n      })\n      .catch(error => {\n        // Reject pending promises on error\n        inflight.get(_key).forEach(([resolve, reject]) => reject(error))\n        inflight.delete(_key)\n        throw error\n      })\n  }\n\n  // Programmatically cache a response\n  middleware.cacheResponse = function (key, response) {\n    throttleRequest(key)\n    cache.set(key, response)\n  }\n  middleware.cache = cache\n  middleware.inflight = inflight\n  middleware.throttling = throttling\n\n  return middleware\n}\n"]}