{"version":3,"file":"queryString.js","sourceRoot":"","sources":["../../src/addons/queryString.ts"],"names":[],"mappings":"AAEA,SAAS,SAAS,CAAC,KAAqB;IACtC,OAAO,OAAO,KAAK,KAAK,WAAW,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAA;AAClD,CAAC;AAED,MAAM,iBAAiB,GAAG,CAAC,GAAW,EAAE,EAAmB,EAAE,OAAgB,EAAE,MAAc,EAAE,EAAE;IAC/F,IAAI,WAAmB,CAAA;IAEvB,IAAI,OAAO,EAAE,KAAK,QAAQ,EAAE;QAC1B,WAAW,GAAG,EAAE,CAAA;KACjB;SAAM;QACL,MAAM,GAAG,GAAG,MAAM,CAAC,QAAQ,CAAC,iBAAiB,EAAE,IAAI,EAAE,IAAI,CAAC,CAAA;QAC1D,KAAK,MAAM,GAAG,IAAI,EAAE,EAAE;YACpB,MAAM,KAAK,GAAG,EAAE,CAAC,GAAG,CAAC,CAAA;YACrB,IAAI,EAAE,CAAC,GAAG,CAAC,YAAY,KAAK,EAAE;gBAC5B,KAAK,MAAM,GAAG,IAAI,KAAK;oBACrB,GAAG,CAAC,MAAM,CAAC,GAAG,EAAE,SAAS,CAAC,GAAG,CAAC,CAAC,CAAA;aAClC;iBAAM;gBACL,GAAG,CAAC,MAAM,CAAC,GAAG,EAAE,SAAS,CAAC,KAAK,CAAC,CAAC,CAAA;aAClC;SACF;QACD,WAAW,GAAG,GAAG,CAAC,QAAQ,EAAE,CAAA;KAC7B;IAED,MAAM,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;IAE5B,IAAI,CAAC,WAAW;QACd,OAAO,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAA;IAEjC,IAAI,OAAO,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC;QAC7B,OAAO,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,WAAW,CAAA;IAErC,OAAO,GAAG,GAAG,GAAG,GAAG,WAAW,CAAA;AAChC,CAAC,CAAA;AAuDD;;;;;;;;GAQG;AACH,MAAM,WAAW,GAAkC;IACjD,MAAM,EAAE;QACN,KAAK,CAAC,EAAE,EAAE,OAAO,GAAG,KAAK;YACvB,OAAO,EAAE,GAAG,IAAI,EAAE,IAAI,EAAE,iBAAiB,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,EAAE,CAAA;QACnF,CAAC;KACF;CACF,CAAA;AAED,eAAe,WAAW,CAAA","sourcesContent":["import type { Wretch, Config, WretchAddon } from \"../types.js\"\n\nfunction stringify(value?: string | null): string | null {\n  return typeof value !== \"undefined\" ? value : \"\"\n}\n\nconst appendQueryParams = (url: string, qp: object | string, replace: boolean, config: Config) => {\n  let queryString: string\n\n  if (typeof qp === \"string\") {\n    queryString = qp\n  } else {\n    const usp = config.polyfill(\"URLSearchParams\", true, true)\n    for (const key in qp) {\n      const value = qp[key]\n      if (qp[key] instanceof Array) {\n        for (const val of value)\n          usp.append(key, stringify(val))\n      } else {\n        usp.append(key, stringify(value))\n      }\n    }\n    queryString = usp.toString()\n  }\n\n  const split = url.split(\"?\")\n\n  if (!queryString)\n    return replace ? split[0] : url\n\n  if (replace || split.length < 2)\n    return split[0] + \"?\" + queryString\n\n  return url + \"&\" + queryString\n}\n\nexport interface QueryStringAddon {\n  /**\n   * Converts a javascript object to query parameters, then appends this query string\n   * to the current url. String values are used as the query string verbatim.\n   *\n   * Pass `true` as the second argument to replace existing query parameters.\n   *\n   * ```\n   * import QueryAddon from \"wretch/addons/queryString\"\n   *\n   * let w = wretch(\"http://example.com\").addon(QueryStringAddon);\n   * // url is http://example.com\n   * w = w.query({ a: 1, b: 2 });\n   * // url is now http://example.com?a=1&b=2\n   * w = w.query({ c: 3, d: [4, 5] });\n   * // url is now http://example.com?a=1&b=2c=3&d=4&d=5\n   * w = w.query(\"five&six&seven=eight\");\n   * // url is now http://example.com?a=1&b=2c=3&d=4&d=5&five&six&seven=eight\n   * w = w.query({ reset: true }, true);\n   * // url is now  http://example.com?reset=true\n   * ```\n   *\n   * ##### **Note that .query is not meant to handle complex cases with nested objects.**\n   *\n   * For this kind of usage, you can use `wretch` in conjunction with other libraries\n   * (like [`qs`](https://github.com/ljharb/qs)).\n   *\n   * ```js\n   * // Using wretch with qs\n   *\n   * const queryObject = { some: { nested: \"objects\" } };\n   * const w = wretch(\"https://example.com/\").addon(QueryStringAddon)\n   *\n   * // Use .qs inside .query :\n   *\n   * w.query(qs.stringify(queryObject));\n   *\n   * // Use .defer :\n   *\n   * const qsWretch = w.defer((w, url, { qsQuery, qsOptions }) => (\n   *   qsQuery ? w.query(qs.stringify(qsQuery, qsOptions)) : w\n   * ));\n   *\n   * qsWretch\n   *   .url(\"https://example.com/\")\n   *   .options({ qs: { query: queryObject } });\n   * ```\n   *\n   * @param qp - An object which will be converted, or a string which will be used verbatim.\n   */\n  query<T extends QueryStringAddon, C, R>(this: T & Wretch<T, C, R>, qp: object | string, replace?: boolean): this\n}\n\n/**\n * Adds the ability to append query parameters from a javascript object.\n *\n * ```js\n * import QueryAddon from \"wretch/addons/queryString\"\n *\n * wretch().addon(QueryAddon)\n * ```\n */\nconst queryString: WretchAddon<QueryStringAddon> = {\n  wretch: {\n    query(qp, replace = false) {\n      return { ...this, _url: appendQueryParams(this._url, qp, replace, this._config) }\n    }\n  }\n}\n\nexport default queryString\n"]}